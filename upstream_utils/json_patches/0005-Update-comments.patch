From 4849e1e64981fe31d15a341d774ad3d4d14b7988 Mon Sep 17 00:00:00 2001
From: PJ Reiniger <pj.reiniger@gmail.com>
Date: Mon, 12 Dec 2022 21:24:41 -0500
Subject: [PATCH 05/12] Update comments

---
 include/nlohmann/detail/conversions/from_json.hpp | 6 +++---
 include/nlohmann/detail/conversions/to_json.hpp   | 2 +-
 include/nlohmann/detail/output/serializer.hpp     | 6 ++++--
 include/nlohmann/json.hpp                         | 4 ++--
 4 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/include/nlohmann/detail/conversions/from_json.hpp b/include/nlohmann/detail/conversions/from_json.hpp
index d411cdea..92c43e11 100644
--- a/include/nlohmann/detail/conversions/from_json.hpp
+++ b/include/nlohmann/detail/conversions/from_json.hpp
@@ -385,9 +385,9 @@ struct from_json_fn
 };
 }
 
-/// namespace to hold default `from_json` function
-/// to see why this is required:
-/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
+// namespace to hold default `from_json` function
+// to see why this is required:
+// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
 namespace
 {
 constexpr const auto& from_json = detail::static_const<detail::from_json_fn>::value;
diff --git a/include/nlohmann/detail/conversions/to_json.hpp b/include/nlohmann/detail/conversions/to_json.hpp
index a382cf60..2fbe4b99 100644
--- a/include/nlohmann/detail/conversions/to_json.hpp
+++ b/include/nlohmann/detail/conversions/to_json.hpp
@@ -328,7 +328,7 @@ struct to_json_fn
 };
 }
 
-/// namespace to hold default `to_json` function
+// namespace to hold default `to_json` function
 namespace
 {
 constexpr const auto& to_json = detail::static_const<detail::to_json_fn>::value;
diff --git a/include/nlohmann/detail/output/serializer.hpp b/include/nlohmann/detail/output/serializer.hpp
index c4fa0169..28d6343b 100644
--- a/include/nlohmann/detail/output/serializer.hpp
+++ b/include/nlohmann/detail/output/serializer.hpp
@@ -41,6 +41,7 @@ class serializer
     /*!
     @param[in] s  output stream to serialize to
     @param[in] ichar  indentation character to use
+    @param[in] indent_init_len  initial length of indentation string buffer
     */
     serializer(raw_ostream& s, const char ichar)
         : o(s), loc(std::localeconv()),
@@ -67,6 +68,7 @@ class serializer
 
     @param[in] val             value to serialize
     @param[in] pretty_print    whether the output shall be pretty-printed
+    @param[in] ensure_ascii    whether the output shall only use ASCII chars
     @param[in] indent_step     the indent level
     @param[in] current_indent  the current indent level (only used internally)
     */
@@ -290,9 +292,9 @@ class serializer
 
     @param[in] s  the string to escape
     @param[in] ensure_ascii  whether to escape non-ASCII characters with
-                             \uXXXX sequences
+                             "\uXXXX" sequences
 
-    @complexity Linear in the length of string @a s.
+    Complexity: Linear in the length of string @a s.
     */
 //-------EXPORTED_FUNC_DEF_START json::serializer
     void dump_escaped(std::string_view s, const bool ensure_ascii)
diff --git a/include/nlohmann/json.hpp b/include/nlohmann/json.hpp
index 204a7e9b..9aff164e 100644
--- a/include/nlohmann/json.hpp
+++ b/include/nlohmann/json.hpp
@@ -5400,7 +5400,7 @@ class basic_json
     @complexity Constant.
 
     @liveexample{The example below shows how arrays can be swapped with
-    `swap()`.,swap__array_t}
+    `swap()`.,swap__std_vector_json}
 
     @since version 1.0.0
     */
@@ -5474,7 +5474,7 @@ class basic_json
     @complexity Constant.
 
     @liveexample{The example below shows how strings can be swapped with
-    `swap()`.,swap__string_t}
+    `swap()`.,swap__std_string}
 
     @since version 1.0.0
     */
