// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

#include "frc/{{module.subfolder}}/{{message.local_type}}.h"
#include "{{module.subfolder}}.pb.h"

using StructType = wpi::Struct<frc::{{message.local_type}}>;

frc::{{message.local_type}} StructType::Unpack(
    std::span<const uint8_t, StructType::kSize> data) {
  return frc::{{message.local_type}}{
  {%- for field in message.fields %}
      {{ struct_unpack(field) }},
  {%- endfor %}
  };
}

void StructType::Pack(std::span<uint8_t, StructType::kSize> data,
                      const frc::{{message.local_type}}& value) {
  {%- for field in message.fields %}
  {{ struct_pack(field) }};
  {%- endfor %}
}
{% if message.has_nested_types %}
void StructType::ForEachNested(
    std::invocable<std::string_view, std::string_view> auto fn) {
{%- for field in message.fields %}
{%- if field.is_message %}
  wpi::ForEachStructSchema<frc::{{field.message_type}}>(fn);
{%- endif %}
{%- endfor %}
}
{% endif %}
google::protobuf::Message* wpi::Protobuf<frc::{{message.local_type}}>::New(
    google::protobuf::Arena* arena) {
  return google::protobuf::Arena::CreateMessage<wpi::proto::Protobuf{{message.local_type}}>(
      arena);
}

frc::{{message.local_type}} wpi::Protobuf<frc::{{message.local_type}}>::Unpack(
    const google::protobuf::Message& msg) {
  auto m = static_cast<const wpi::proto::Protobuf{{message.local_type}}*>(&msg);
  return frc::{{message.local_type}}{
  {%- for field in message.fields %}
      {{ proto_unpack(field) }},
  {%- endfor %}
  };
}

void wpi::Protobuf<frc::{{message.local_type}}>::Pack(google::protobuf::Message* msg,
                                      const frc::{{message.local_type}}& value) {
  auto m = static_cast<wpi::proto::Protobuf{{message.local_type}}*>(msg);
  {%- for field in message.fields %}
  {{ proto_pack(field) }};
  {%- endfor %}
}
