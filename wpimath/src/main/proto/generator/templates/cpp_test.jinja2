// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

#include <gtest/gtest.h>

#include "frc/{{module.subfolder}}/{{message.local_type}}.h"
#include "{{module.subfolder}}.pb.h"

using namespace frc;

namespace {

using StructType = wpi::Struct<frc::{{message.local_type}}>;
using ProtoType = wpi::Protobuf<frc::{{message.local_type}}>;

constexpr std::array<uint8_t, StructType::kSize> create_test_buffer() {
  std::array<uint8_t, StructType::kSize> output;
  int buffer[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
};
  for (size_t idx = 0; idx < StructType::kSize; ++idx) {
    output[idx] = static_cast<uint8_t>(buffer[idx]);
  }
  return output;
}

std::array<uint8_t, StructType::kSize> kExpectedStructBuffer =
    create_test_buffer();

constexpr {{message.local_type}} kExpectedData{};
}  // namespace

TEST({{message.local_type}}SerdeTest, StructPack) {
  uint8_t buffer[StructType::kSize];
  StructType::Pack(buffer, kExpectedData);

  for (size_t i = 0; i < StructType::kSize; ++i) {
    EXPECT_EQ(kExpectedStructBuffer[i], buffer[i]) << " on byte " << i;
  }
}

TEST({{message.local_type}}SerdeTest, StructUnpack) {
  {{message.local_type}} unpacked_data = StructType::Unpack(kExpectedStructBuffer);
{% for field in message.fields %}
    {{assert_local_equals(field)}}
{%- endfor %}
}


TEST({{message.local_type}}SerdeTest, ProtobufPack) {
  wpi::proto::Protobuf{{message.local_type}} proto;
  ProtoType::Pack(&proto, kExpectedData);
{% for field in message.fields %}
    {{assert_local_vs_proto_equals(field)}}
{%- endfor %}
}



TEST({{message.local_type}}SerdeTest, ProtobufUnpack) {
  wpi::proto::Protobuf{{message.local_type}} proto;
{%- for field in message.fields %}
  {{test_proto_setter(field)}}
{%- endfor %}

  {{message.local_type}} unpacked_data = ProtoType::Unpack(proto);
{%- for field in message.fields %}
    {{assert_local_equals(field)}}
{%- endfor %}
}