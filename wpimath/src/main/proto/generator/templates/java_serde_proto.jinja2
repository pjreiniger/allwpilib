// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package edu.wpi.first.math.{{module.subfolder}}.serde;

import edu.wpi.first.math.{{module.subfolder}}.{{message.local_type}};
{%- for field in message.fields %}
{%- if field.is_message %}
import edu.wpi.first.math.geometry.{{field.message_type}};
{%- endif %}
{%- endfor %}
import edu.wpi.first.math.proto.{{module.java_proto_subpath}}.{{message.protobuf_short_type}};
import edu.wpi.first.util.protobuf.Protobuf;
import us.hebi.quickbuf.Descriptors.Descriptor;

public class {{message.local_type}}ProtoSerde implements Protobuf<{{message.local_type}}, {{message.protobuf_short_type}}> {
  @Override
  public Class<{{message.local_type}}> getTypeClass() {
    return {{message.local_type}}.class;
  }

  @Override
  public Descriptor getDescriptor() {
    return {{message.protobuf_short_type}}.getDescriptor();
  }
{%- if message.has_nested_types %}

  @Override
  public Protobuf<?, ?>[] getNested() {
    return new Protobuf<?, ?>[] { {%- for field in message.fields %}{% if field.is_message %}{{field.message_type}}.proto{% if not loop.last %}, {% endif%}{% endif %}{%endfor-%} };
  }{% endif %}

  @Override
  public {{message.protobuf_short_type}} createMessage() {
    return {{message.protobuf_short_type}}.newInstance();
  }

  @Override
  public {{message.local_type}} unpack({{message.protobuf_short_type}} msg) {
    return new {{message.local_type}}({{get_protobuf_unpack(message)}});
  }

  @Override
  public void pack({{message.protobuf_short_type}} msg, {{message.local_type}} value) {
{{get_protobuf_pack(message)}}
  }
}
