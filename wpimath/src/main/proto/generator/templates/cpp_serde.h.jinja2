// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

#pragma once

#include <wpi/protobuf/Protobuf.h>
#include <wpi/struct/Struct.h>

#include <wpi/SymbolExports.h>

#include "frc/{{module.subfolder}}/{{message.local_type}}.h"

template <>
struct wpi::Struct<frc::{{message.local_type}}> {
  static constexpr std::string_view kTypeString = "struct:{{message.local_type}}";
  static constexpr size_t kSize = {{get_size(message)}};
  static constexpr std::string_view kSchema = "{{get_schema(message)}}";

  static frc::{{message.local_type}} Unpack(std::span<const uint8_t, kSize> data);
  static void Pack(std::span<uint8_t, kSize> data,
                   const frc::{{message.local_type}}& value);
{%- if message.has_nested_types %}
  static void ForEachNested(
      std::invocable<std::string_view, std::string_view> auto fn);
{%- endif %}
};
{% if message.has_nested_types %}
static_assert(wpi::HasNestedStruct<frc::{{message.local_type}}>);
{% endif %}
template <>
struct WPILIB_DLLEXPORT wpi::Protobuf<frc::{{message.local_type}}> {
  static google::protobuf::Message* New(google::protobuf::Arena* arena);
  static frc::{{message.local_type}} Unpack(const google::protobuf::Message& msg);
  static void Pack(google::protobuf::Message* msg,
                   const frc::{{message.local_type}}& value);
};

