name: CMake

on: [pull_request, push]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: Linux
            container: wpilib/roborio-cross-ubuntu:2023-22.04
            flags: "-DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=ON"
          - os: macOS-12
            name: macOS
            container: ""
            flags: "-DCMAKE_BUILD_TYPE=Release -DWITH_JAVA=OFF -DWITH_EXAMPLES=ON"

    name: "Build - ${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libopencv-dev libopencv4.5-java python-is-python3 ninja-build

      - name: Install opencv (macOS)
        run: brew install opencv ninja
        if: runner.os == 'macOS'

      - name: Set up Python 3.8 (macOS)
        if: runner.os == 'macOS'
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install jinja
        run: python -m pip install jinja2

      - name: configure
        run: cmake -S . -B build -G "Ninja" ${{ matrix.flags }}

      - name: build
        working-directory: build
        run: cmake --build . --parallel $(nproc)

      - name: test
        working-directory: build
        run: ctest --output-on-failure

  build-windows:
    name: "Build - Windows"
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install CMake
        uses: lukka/get-cmake@v3.23.0

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg
          vcpkgGitCommitId: 78b61582c9e093fda56a01ebb654be15a0033897 # HEAD on 2023-08-6

      - name: Install jinja
        run: python -m pip install jinja2

      - name: configure
        run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DWITH_JAVA=OFF -DWITH_EXAMPLES=ON -DUSE_SYSTEM_FMTLIB=ON -DUSE_SYSTEM_LIBUV=ON -DUSE_SYSTEM_EIGEN=ON -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_INSTALL_OPTIONS=--clean-after-build -DVCPKG_TARGET_TRIPLET=x64-windows-release -DVCPKG_HOST_TRIPLET=x64-windows-release

      # Build wpiutil at full speed, wpimath depends on wpiutil
      - name: build wpiutil
        working-directory: build
        run: cmake --build . --parallel $(nproc) --target wpiutil/all

      # Build wpimath slow to prevent OOM
      - name: build wpimath
        working-directory: build
        run: cmake --build . --parallel 1 --target wpimath/all

      # Build everything else fast
      - name: build
        working-directory: build
        run: cmake --build . --parallel $(nproc)

      - name: test
        working-directory: build
        run: ctest --output-on-failure
